rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is a chat participant
    function isChatParticipant(chatId) {
      return isAuthenticated() &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Helper function to check if user is in participants array
    function isInParticipants(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }

    // Helper function to check if user is event creator
    function isEventCreator(eventId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid;
    }

    // Helper function to check if chat is an event group chat
    function isEventGroupChat() {
      return request.resource.data.type == 'event_group';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Events collection
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Friends collection
    match /friends/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == userId || 
        request.resource.data.keys().hasAll(['friends']) && 
        request.resource.data.friends.hasOnly([request.auth.uid])
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
         request.resource.data.friends.hasAll(resource.data.friends))
      );
      
      // Friend requests subcollection
      match /requests/{requestId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          request.auth.uid == resource.data.fromUserId
        );
        allow create: if isAuthenticated() && 
          request.auth.uid == request.resource.data.fromUserId &&
          request.resource.data.toUserId == userId;
        allow update: if isAuthenticated() && 
          request.auth.uid == userId;
        allow delete: if isAuthenticated() && (
          request.auth.uid == userId || 
          request.auth.uid == resource.data.fromUserId
        );
      }
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated
      allow create: if isAuthenticated();
      
      // Allow update if authenticated and either:
      // 1. User is in participants
      // 2. User is the event creator (for event group chats)
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        (resource.data.type == 'event_group' && 
         isEventCreator(resource.data.eventId))
      );

      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if authenticated
        allow read: if isAuthenticated();
        
        // Allow create if authenticated
        allow create: if isAuthenticated();
        
        // Allow update if authenticated and user is message sender
        allow update: if isAuthenticated() && 
          resource.data.sender == request.auth.uid;
      }
    }

    // Mail collection for email sending
    match /mail/{mailId} {
      allow create: if isAuthenticated();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Saved Events collection
    match /savedEvents/{savedEventId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        savedEventId.matches(request.auth.uid + '_.*')
      );
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        savedEventId.matches(request.auth.uid + '_.*')
      );
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Memories collection
    match /memories/{memoryId} {
      allow read: if true; // Anyone can read memories
      
      // Allow create if authenticated and user is setting themselves as creator
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      
      // Allow update if authenticated and either:
      // 1. User is the creator of the memory
      // 2. User is only updating the likes array
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']))
      );
      
      // Allow delete if authenticated and user is the creator
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Locations collection (assuming it exists or might exist)
    match /locations/{locationId} {
      // Allow reading location details (adjust if needed)
      allow read: if true;
      // Deny direct writing to location docs for now (can be adjusted)
      allow write: if false;

      // Reviews subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if true;

        // Only authenticated users can create reviews for themselves
        allow create: if isAuthenticated()
                      && request.resource.data.userId == request.auth.uid;

        // Only the review author can update or delete their own review
        allow update, delete: if isAuthenticated()
                              && resource.data.userId == request.auth.uid;
      }
    }

    // Default deny for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 